{"version":3,"sources":["components/nav/Nav.js","components/header/header.js","components/image-buttons/imageButton.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["listStyle","listStyleType","nobr","display","Nav","props","react_default","a","createElement","className","style","href","activeMessage","score","topScore","Header","ImageButton","onClick","shufflePics","id","type","alt","name","src","image","Wrapper","children","App","state","pics","console","log","arra1","temp","index","ctr","length","Math","floor","random","shuffle","_this","setState","_this2","this","nav_Nav","components_Wrapper","header","map","pic","imageButton","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e9a7a73e.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./style.css\";\r\n\r\n\r\nconst listStyle = {\r\n    listStyleType: 'none'\r\n};\r\n\r\nconst nobr = {\r\n    display: 'inline'\r\n}\r\n\r\nfunction Nav(props) {\r\n    \r\n    return (\r\n        <nav className=\"bg-dark fixed-top\">\r\n            <div className=\"container\">\r\n                <ul style={listStyle} className=\"text-center\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            <li className=\"brand\"><a href=\"/\"><h3 className=\"text-light\">Clicky Game</h3></a></li>\r\n                        </div>\r\n                        <div className=\"col\">\r\n                            <li className=\"col\"><h3 className=\"text-light\">{props.activeMessage}</h3></li>\r\n                        </div>\r\n                        <div className=\"col\">\r\n                            <li><h3 className=\"text-light\" style={nobr} >Score: </h3>\r\n                            <h3 className=\"text-light\" style={nobr} > {props.score}</h3>\r\n                            <h3 className=\"text-light\" style={nobr}> | </h3>\r\n                            <h3 className=\"text-light\" style={nobr}>Top Score:</h3>\r\n                            <h3 className=\"text-light top-score\" style={nobr}> {props.topScore}</h3>\r\n                            </li>\r\n                        </div>\r\n                    </div>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default Nav;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"jumbotron\">\r\n            <div className=\"card text-center\">\r\n                <p>Click on a space ship to score a point. Careful though, if you click on the same ship twice you lose all your points!</p>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./img-btn.css\";\r\n\r\nfunction ImageButton(props) {\r\n    return (\r\n        <div onClick={() => props.shufflePics(props.id)} className=\"card img-card\">\r\n            <div className=\"img-container\">\r\n                <button className=\"button\" type=\"button\">\r\n                    <img alt={props.name} src={props.image} id={props.id}/>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default ImageButton;\r\n\r\n\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Nav from './components/nav/Nav';\nimport Header from './components/header/header';\nimport ImageButton from './components/image-buttons/imageButton';\nimport Wrapper from \"./components/Wrapper\";\nimport pics from './pics.json';\n\n\n\nclass App extends Component {\n\n  state = {\n    pics,\n    activeMessage: 'Click an image to begin!',\n    score: 0,\n    topScore: 0,\n    id: null\n  };\n\n\n\n\n\n  shufflePics = (id) => {\n    console.log(id);\n    function shuffle(arra1) {\n      let ctr = arra1.length;\n      let temp;\n      let index;\n\n      while (ctr > 0) {\n        index = Math.floor(Math.random() * ctr);\n        ctr--;\n        temp = arra1[ctr];\n        arra1[ctr] = arra1[index];\n        arra1[index] = temp;\n      }\n      return arra1;\n    }\n\n    const pics = shuffle(this.state.pics);\n    this.setState({ pics });\n    \n    this.setState({ id });\n\n    \n\n    if (id !== this.state.id) {\n      let score = this.state.score + 1;\n      this.setState({score});\n      let activeMessage = 'you scored a point!';\n      console.log('worked');\n      this.setState({ activeMessage });\n    } else if( id === this.state.id && this.state.id !== null) {\n      let activeMessage = 'you lose :(';\n      this.setState({ activeMessage });\n      let score = 0;\n      this.setState({ score });\n    }\n\n    if (this.state.score > this.state.topScore) {\n      let topScore = this.state.topScore + 1;\n      this.setState({topScore})\n    }\n    \n  }\n\n  render() {\n    return (\n\n\n      <div>\n        <Nav\n          activeMessage={this.state.activeMessage}\n          pics={pics}\n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n        <Wrapper>\n        <Header />\n        \n          {this.state.pics.map(pic => (\n            <ImageButton\n              shufflePics={this.shufflePics}\n              id={pic.id}\n              image={pic.image}\n              name={pic.name}\n            />\n          ))}\n\n\n        </Wrapper>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}